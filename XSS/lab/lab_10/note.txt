XSS - Stored DOM XSS

End Goal: exploit this vulnerability to call the alert() function.

Analystic
---------
Sau khi view posts, ta có thể tìm thấy 1 file JS có tên loadComment.... đọc qua tên đã cung cấp cho ta về lỗ hổng, ở đây là lỗ hổng về việc thoát kí tự html. Sau khi mở file ta có thể thấy, có 1 hàm loadComments với tham số truyền vào là đường dẫn comment của bài post. Quay qua mã trang ta cũng sẽ thấy hàm này được gọi nhằm tải comment của bài post khi truy cập, nó có 1 số lệnh giống với lab trước nhưng ở đây đã sử dụng JSON.parse để chuyển đổi kết quả trả về thành kiểu object của JSON --> ta không thể thao túng bằng việc ngắt sớm và nối thêm hàm được nữa. Bên cạnh đó ta thấy 1 hàm escapeHTML với tham số truyền vào là html, hàm này thực hiện chuyển đổi các kí tự < > trong html thành những chuỗi kí tự được mã hóa --> nếu chúng ta truyền vào trong comment là lệnh như <strong>tu<strong> --> nó sẽ mã hóa < và > ,tuy nhiên nó chỉ mã hóa 2 kí tự đầu tiên của chuỗi. vì vậy ta chỉ cần đưa ra 1 bộ <> để nó bị mã hóa r tiếp tục chèn thẻ html vào comment sẽ xss được bài này. 

Một lý do cho lỗ hổng là việc sử dụng sai phương pháp replace. Nếu mẫu là 1 chuỗi thì chỉ kí tự xuất hiện lần đầu được thay thế. vì vậy nếu muốn thay thế tất cả các kết quả khớp trong 1 chuỗi thì chúng ta cần để sử dụng biểu thức chính quy regex với 1 cờ cụ thể, đây là cách duy nhất để thay thế mọi thứ. Và chúng ta có gần như đã tìm ra điều đó chỉ bằng cách nhìn vào lab, chúng ta có thể suy luận ra ngay cả trước khi chúng ta xem mã JS, chỉ có bộ dấu ngoặc nhọn đầu tiên được mã hóa HTML, phần còn lại thì không và đó là do cách sử dụng phương pháp thay thế này nên hiện tại có nhiều cách mã hóa HTML an toàn, nó liên quan đến cách comment này trong csdl, hãy nhớ rằng chúng ta nói rằng những comment này được truy xuất bằng một yêu cầu HTTP không đồng bộ, để đáp lại yêu cầu http này, 1 số loại truy vấn csdl được chạy ở backend và đối tượng json này được trả về, xem cách các comment được lưu trữ trong csdl mà chúng ta có được lưu trữ với kí tự html còn nguyên vẹn,vậy điều đang xảy ra ở đây là có điều gì đó không an toàn được lưu trữ trong csdl thì chúng ta đang dựa vào JS để tạo mã đó an toàn cho việc sử dụng khi nó được hiển thị cho DOM, lý tưởng nhất là đã quá muộn trong chuỗi, vì vậy cách thức hoạt động là chúng ta gửi comment của mình trên máy chủ, các ký tự đặc biệt sẽ bị xóa khỏi chuỗi comment mà chúng ta cung cấp nên điều này không nên xảy ra được lưu trữ dưới dạng dấu ngoặc nhọn, nó phải được lưu trữ bằng mã hóa HTML để không cần phải làm gì ở giao diện người dùng, chúng ta có thể chỉ cần truy xuất những comment này từ csdl, sau đó chúng ta có thể hiển thị chúng trực tiếp trên DOM, nếu có bất kì nhận xét nào, việc thoát khỏi giao diện người dùng bằng JS hoàn toàn là 1 lớp bảo vệ thêm bảo mật bổ sung nhưng trong hầu hết các trường hợp, điều đúng là phải xử lý vấn đề này khi người dùng gửi lần đầu tiên, sau đó nó có thể được lưu trữ an toàn trong csdl. 