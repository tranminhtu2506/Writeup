XSS - Reflected XSS into HTML context with all tags blocked except custom ones

End Goal: perform a cross-site scripting attack that injects a custom tag and automatically alerts document.cookie.

Analystic
---------
Bước 1: có thể thấy ở đây tất cả các thẻ đã bị block ngoài thẻ custom-tag nên ta cần tìm hiểu về thẻ custom-tag
, nếu ta thử 1 thẻ nào đó khác --> trang sẽ hiện lên 1 tag hiển thị tag not allowed 
Bước 2: ta có thể thử tìm kiếm với thẻ <custom-tag> --> trang trả về kết quả: 0 search results for '' --> custom-tag không bị chặn. nếu vào mã trang ta có thể thấy có 1 cặp thẻ custom-tag đã được tạo 
Bước 3: Giờ thử tìm kiếm 1 thẻ custom-tag với thuộc tính onmouseover='alert(1)' để kiểm tra --> kết quả của trang là: 0 search results for '' --> khi di chuột vào ' trang sẽ hiển thị lên alert(1) --> có thể xss nhưng hiện tại vẫn cần tương tác của người dùng 
Bước 4: ta sẽ thay đổi thuộc tính thành onfocus thay vì onmouseover và để thực hiện cuộc tấn công này 1 cách tự động, ta sẽ cung cấp 2 thuộc tính bổ sung là: 
1. id-cho phép ta tập trung vào 1 phần tử cụ thể từ URL bằng cách sử dụng thẻ bắt đầu bằng #, đó là 1 tính năng trong html gọi là đánh dấu trang --> nếu ta đặt cho nó 1 id='X' sau đó tạo 1 url và ở cuối trong URL đó, chúng ta có #X, điều đó nghĩa là trang sẽ chuyển đến phần tử cụ thể hiện đang được tham chiếu, điều đó không hoàn toàn giống việc chúng ta đang chỉ tập trung vào phần tử đó mà chỉ truy cập vào 1 vị trí nhất định trên trang chứ không phải giống như việc tập trung trên thực tế, chỉ có thể tập trung vào 1 số loại phần tử nhất định, ví dụ như: form input, chúng ta thường có thể chuyển đổi qua các đầu vào biểu mẫu bằng cách sử dụng phím tab, ta có thể tab vào các phần tử không phải input của form bằng cách sử dụng thuộc tính tabindex='', điều này cho phép phần tử có thể focus nên chúng ta cũng sẽ thêm thuộc tính này vào thẻ của chúng ta, cung cấp cho nó 1 giá trị = '1'. 
Bước 5: giờ chúng ta sẽ xem lại url vì rõ ràng ý tưởng về tấn công xss xét về mặt ít nhất cuộc tấn công xss reflected chúng ta muốn đưa liên kết cụ thể này đến 1 người dùng khác. Một điều khác tất nhiên chúng ta có thể làm là nếu chúng ta có thể khiến nạn nhân truy cập và tấn công 1 miền được kiểm soát, chúng ta có thể thực thi JS trên miền đó, chuyển hướng trình duyệt của nạn nhân đến URL cụ thể này nhưng dù theo cách nào thì người dùng hoặc nạn nhân cần phải sử dụng URL này bằng cách nhấp vào liên kết hoặc bị chuyển hướng bởi một JS độc hại, điều duy nhất chúng ta cần làm ở đây là thêm thẻ bắt đầu bằng # mà chúng ta đã mô tả, hãy nhập #X và truy cập vào URL này, ngay lập tức chúng ta nhận được 1 document.cookie được phản ánh trên trang trống. Trong trường hợp này chúng ta thấy rằng cuộc tấn công XSS là đang hoạt động nên điều đang xảy ra ở đây là #X đang khiến trang ngay lập tức tập trung vào thành phần với ID=X và nó có thể được tập trung vào vì chúng ta sử dụng thuộc tính tabindex , giờ sao chép nó và chuyển đến máy chủ khai thác. Hãy nhớ cách chúng ta đã nói 1 phương pháp thực hiện cuộc tấn công này là đưa nạn nhân truy cập và tấn công một máy chủ được kiểm soát. Rõ ràng là chúng ta không thể đánh cắp cookie của nạn nhân trong bối cảnh đó vì nạn nhân sẽ không gửi cookie của mình cho miền khác đến miền kiểm soát của kẻ tấn công nhưng chúng ta có thể thực thi JS trên trình duyệt của nạn nhân và một trong những điều chúng ta có thể làm với JS là chuyển hướng trình duyệt của nạn nhân đến URL độc hại. Đó là những gì ta làm tiếp theo. Coi phần body trong tiêu đề là HTML body, chúng ta sẽ cần 1 số thẻ <script>, bạn có thể nhập location = 'https://0a39009f0441f2dd807f672d00e600e3.web-security-academy.net/?search=%3Ccustom-tag+onfocus%3D%22alert%28document.cookie%29%22+id%3D%27X%27+tabindex%3D%271%27%3E#X' (đường link trang web đã kèm theo #X) sau đó đóng thẻ </script>. Ý tưởng đơn giản là nạn nhân truy cập miền do kẻ tấn công kiểm soát, miền do kẻ tấn công kiểm soát chạy 1 số JS trên trình duyệt của nạn nhân để JS thay đổi vị trí trình duyệt của nạn nhân thành URL độc hại.   