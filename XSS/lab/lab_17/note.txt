XSS - Reflected XSS in canonical link tag

End Goal: Để giải quyết bài lab, hãy thực hiện một cuộc tấn công kịch bản chéo trang trên trang chủ để chèn một thuộc tính gọi hàm cảnh báo.
Để hỗ trợ việc khai thác của bạn, bạn có thể giả định rằng người dùng được mô phỏng sẽ nhấn các tổ hợp phím sau: 
ALT+SHIFT+X 
CTRL+ALT+X 
Alt+X 
Xin lưu ý rằng giải pháp dự kiến ​​cho phòng thí nghiệm này chỉ có thể thực hiện được trong Chrome.

Analystic
---------
Phòng lab này về cơ bản chứng minh cách có thể có một cuộc tấn công tập lệnh chéo trang Vector vào 1 phần tử mà người dùng không nhìn thấy được. Ví dụ: nếu chúng ta nghĩ về bất cứ điều gì bên trong thẻ head trên tài liệu HTML thì nó sẽ không hiển thị cho người dùng trong hầu hết các trường hợp, vì vậy, ví dụ: nếu chúng ta có 1 số loại trình nghe khi nhấp chuột vào 1 liên kết chuẩn bên trong thẻ head thì sẽ có một 1 chút vấn đề với điều đó vì người dùng sẽ không thể nhấp vào thứ gì đó không được hiển thị như 1 phần của trang. Chúng ta cũng sẽ nói về chính xác liên kết chuẩn là gì (canonical link tag) mà không cần nói thêm Ado. 
Khi bắt đầu truy cập, ta có thể thấy không có bất kì trường nhập dữ liệu nào ở trang chính và cách duy nhất là chúng ta sẽ đưa vào trường này là thông qua URL. Vì vậy những gì chúng ta có thể làm là tạo 1 chuỗi truy vấn ở cuối URL và chúng ta sẽ chỉ nhập 1 chỗ tùy ý, chúng ta sẽ xem xét DOM và điều chúng ta quan tâm là liệu điều này có thực sự được phản ánh đến trang ở bất kỳ đâu hay không và lưu ý rằng chúng ta có liên kết này 
<link rel="canonical" href="https://0a9200ef03a4822880a62ba000eb0075.web-security-academy.net/?tmt">
thuộc tính href xuất hiện phản ánh đơn giản URL trong thanh URL vì chúng ta có thể thay dấu ? trong chuỗi truy vấn của mình theo sau là tmt và đây không phải là phản ánh dựa trên DOM vì vậy DOM không bị thao túng ở đây. Đây thực sự là một phần của HTTP chẳng hạn như phản hồi quay lại từ máy chủ; nếu bạn xem mã nguồn trang ở đây, chúng ta có thể thấy rằng chúng ta đang đưa vào phản hồi HTML thô đến từ máy chủ nhưng rõ ràng chúng ta cũng có thể xem phản hồi đó trong trình duyệt DOM nhưng nó đã không đạt được điều đó thông qua thao tác DOM, đây là 1 phần của HTTP response thô từ máy chủ, bây giờ chúng ta có thể tự hỏi chính xác canonical link là gì ? 
 <link rel="canonical" href='https://0a9200ef03a4822880a62ba000eb0075.web-security-academy.net/?tmt'/>
Nên nếu chúng ta có link rel= canonical và đây thực sự là 1 dấu hiệu cho các công cụ tìm kiếm vì vậy đây là liên kết được ưu tiên URL để xem nội dung cụ thể này; nói cách khác, đôi khi chúng ta có các trang có nội dung giống nhau nhưng URL khác nhau và đó có thể là 1 trong những URL mà là URL chính thức nơi người dùng được cho là xem nội dung đó trong khi các URL khác là bản sao hoặc liên kết đã lỗi thời và chúng ta muốn chỉ định URL chính thức nào để xem nội dung đó nên đây là dấu hiệu cho các công cụ tìm kiếm biết rằng đây thực sự là URL chính xác. Tất nhiên nếu URL đó được tạo tự động thì người ta có thể tự hỏi liệu đó có thực sự chính xác hay không cách sử dụng liên kết chuẩn nhưng ngoài điều đó ra, chúng ta có thể đưa rõ ràng vào liên kết chuẩn cụ thể này, lưu ý rằng nó nằm trong thẻ head nên có nghĩa là nó không xuất hiện trên trang ở bất kì đâu nhưng câu hỏi rõ ràng đầu tiên của chúng ta là liệu chúng ta có thể thoát khỏi thuộc tính href của phần tử link này không bởi vì nếu có thể, chúng ta có thể thêm các thuộc tính bổ sung vào phần tử liên kết cụ thể nên hãy lưu ý rằng thuộc tính href được gói trong dấu ngoặc đơn. 

Vì vậy điều đầu tiên, chúng ta sẽ thử và làm ở đây thực sự thoát khỏi chuỗi đó bằng 1 trích dẫn duy nhất, sau đó hãy thử và thêm thuộc tính của riêng chúng ta, chúng ta chỉ cần nói ?'onclick = alert(1) và hãy xem những gì chúng ta nhận được, vì vậy chúng ta sẽ xem xét mã nguồn của trang chỉ để chứng minh rằng đây thực sự là một số liệu thống kê phản hồi quay lại từ chính máy chủ, chúng ta có thể thấy nó: 
<link rel="canonical" href="https://0aec00f60372f4808644efa0003400a8.web-security-academy.net/?" onclick="alert(1)">
vậy nên những gì chúng ta có thể thấy là chúng ta đã quản lý thành công việc đưa vào mã nguồn ở đây, lưu ý rằng tên thuộc tính có màu trắng sau đó giá trị màu xanh lam. Nhưng vấn đề là chúng ta thực sự không thể nhấp vào phần tử này nên chúng ta đã cố gắng đưa vào 1 trình xử lý sự kiện nào chúng ta có thể thấy phần tử cụ thể này trên trang và chúng ta nhấp vào nó thì chúng ta sẽ nhận được 1 cảnh báo xuất hiện về vấn đề trang. Đây có phải là bên trong thẻ head không tải lên trang ở bất cứ đâu nên câu hỏi đặt ra là có cách nào để nhấp vào phần tử này mặc dù thực tế là không có sự đặt trước vật lý nào cho phần tử đó trên trang nơi chúng ta có thể nhấp chuột vào và câu trả lời là có và bằng cách sử dụng cái được gọi là phím truy cập và phím truy cập về cơ bản là phím tắt để nhấp vào 1 thành phần nhất định. Nó không được phổ biến và chức năng chính xác của nó sẽ phụ thuộc vào trình duyệt chứ không phải được hỗ trợ bởi tất cả các trình duyệt khóa truy cập nên lab cụ thể này phải được giải quyết trong 1 trình duyệt hỗ trợ access Keys. Access Keys có thể được thêm dưới dạng thuộc tính, vì vậy chúng ta chỉ cần nhập: accesskey='x'. Hãy xem trang có điều chỉnh gì không:
<link rel="canonical" href='https://0aec00f60372f4808644efa0003400a8.web-security-academy.net/?'accesskey='x'onclick='alert(1)'/>
như có thể thấy source của ta có phần tử link này, chúng ta có thuộc tính accesskey='x' và onclick='alert(1)' nó sẽ giống như nhấp chuột nên nó thực sự sẽ kích hoạt điều này khi nghe sự kiện nhấp chuột. Các phím truy cập được sử dụng tùy thuộc vào trình duyệt và hệ điều hành nên nó thường sẽ giống như alt-shift-x hoặc alt-x và x nhưng bạn có thể cần thực hiện 1 chút nghiên cứu nhanh tùy thuộc vào hệ điều hành và trình duyệt của bạn để hiểu cách kích hoạt khóa truy cập và hãy nhớ rằng không phải tất cả các trình duyệt đều hỗ trợ accesskey nên nếu không tìm được cách để accesskey hoạt động và đang cố giải quyết lab, có thể cần phải thay đổi trình duyệt.